{
  "version": 1,
  "scripts": [
    {
      "metadata": {
        "uuid": "6187833c-b7e2-4d81-84b5-93460a717e91",
        "title": "Search CVEs",
        "last_modified": "2025-03-20T14:16:04.463651",
        "last_executed": "2025-03-20T14:16:36.910203"
      },
      "current": {
        "code": "tool = {\n    \"name\": \"search_cves\",\n    \"description\": \"Searches for vulnerabilities related to a given binary using binary name and version as filters.\",\n    \"parameters\": {\n        \"properties\": {\n            \"binary_name\": {\n                \"type\": \"string\",\n                \"description\": \"Name of the binary to search vulnerabilities for\"\n            },\n            \"version\": {\n                \"type\": \"string\",\n                \"description\": \"Optional version number of the binary\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": [\"binary_name\"]\n    }\n}\n\ntry:\n    # Use this method to get a dict containing the arguments\n    args = get_tool_arguments(tool)\nexcept Exception as e:\n    print(f\"Error: {e}\")\n    exit(1)\n\nimport requests\nimport json\n\ndef search_vulnerabilities(binary_name, version=\"\"):\n    # Try multiple vulnerability databases in sequence\n    print(f\"Searching for vulnerabilities related to {binary_name}...\")\n    \n    # First try NVD (most comprehensive)\n    results = search_nvd(binary_name, version)\n    if results:\n        print(f\"Found {len(results)} vulnerabilities from NVD.\")\n        return results\n    \n    # Then try OSV (good for open source)\n    results = search_osv(binary_name, version)\n    if results:\n        print(f\"Found {len(results)} vulnerabilities from OSV.\")\n        return results\n    \n    # Finally try CIRCL as fallback\n    results = search_circl(binary_name, version)\n    if results:\n        print(f\"Found {len(results)} vulnerabilities from CIRCL.\")\n        return results\n    \n    print(\"No vulnerabilities found in any database.\")\n    return []\n\ndef search_nvd(binary_name, version=\"\"):\n    \"\"\"Search the National Vulnerability Database (NIST)\"\"\"\n    print(\"Searching NVD database...\")\n    base_url = \"https://services.nvd.nist.gov/rest/json/cves/2.0\"\n    \n    # Format query\n    keyword = binary_name\n    if version:\n        keyword += f\" {version}\"\n    \n    params = {\n        \"keywordSearch\": keyword,\n        \"resultsPerPage\": 50\n    }\n    \n    try:\n        response = requests.get(base_url, params=params)\n        response.raise_for_status()\n        data = response.json()\n        \n        # Extract CVE items\n        cve_items = data.get('vulnerabilities', [])\n        \n        results = []\n        for item in cve_items:\n            cve = item.get('cve', {})\n            cve_id = cve.get('id')\n            \n            # Get description\n            descriptions = cve.get('descriptions', [])\n            description = next((d.get('value') for d in descriptions if d.get('lang') == 'en'), \n                               \"No description available\")\n            \n            results.append({\n                'id': cve_id,\n                'summary': description\n            })\n        \n        return results\n    except requests.RequestException as e:\n        print(f\"Error fetching from NVD: {e}\")\n        return []\n\ndef search_osv(binary_name, version=\"\"):\n    \"\"\"Search OSV (Open Source Vulnerabilities) database\"\"\"\n    print(\"Searching OSV database...\")\n    url = \"https://api.osv.dev/v1/query\"\n    \n    # Prepare request payload\n    payload = {\n        \"package\": {\n            \"name\": binary_name,\n             \"ecosystem\": \"OSS-Fuzz\"\n        }\n    }\n    \n    # Add version if provided\n    if version:\n        payload[\"package\"][\"version\"] = version\n    \n    try:\n        response = requests.post(url, json=payload)\n        response.raise_for_status()\n        data = response.json()\n        \n        vulnerabilities = data.get('vulns', [])\n        \n        results = []\n        for vuln in vulnerabilities:\n            vuln_id = vuln.get('id')\n            summary = vuln.get('summary', \"No summary available\")\n            \n            results.append({\n                'id': vuln_id,\n                'summary': summary\n            })\n        \n        return results\n    except requests.RequestException as e:\n        print(f\"Error fetching from OSV: {e}\")\n        return []\n\ndef search_circl(binary_name, version=\"\"):\n    \"\"\"Search CIRCL CVE database (original method)\"\"\"\n    print(\"Searching CIRCL database...\")\n    base_url = \"https://cve.circl.lu/api\"\n    \n    try:\n        url = f\"{base_url}/search/product/{binary_name}\"\n        response = requests.get(url)\n        response.raise_for_status()\n        cve_data = response.json()\n        \n        if isinstance(cve_data, list):\n            # Filter by version if provided\n            if version:\n                filtered_data = []\n                for cve in cve_data:\n                    if version.lower() in str(cve).lower():\n                        filtered_data.append(cve)\n                return filtered_data\n            else:\n                return cve_data\n        else:\n            return []\n    except requests.RequestException as e:\n        print(f\"Error fetching from CIRCL: {e}\")\n        return []\n\n# Fetch vulnerabilities related to the binary\nvulnerability_list = search_vulnerabilities(args['binary_name'], args.get('version', ''))\n\n# Store the vulnerabilities in an analysis index\nwith open_index(bv, \"Vulnerability Analysis\") as index:\n    for vuln in vulnerability_list:\n        vuln_id = vuln.get('id', 'Unknown')\n        description = vuln.get('summary', 'No description available')\n        index.add_entry(vuln_id, {\"Vulnerability ID\": vuln_id, \"Description\": description})\n\nprint(f\"Found {len(vulnerability_list)} vulnerabilities related to {args['binary_name']}.\")",
        "llm_op_specifications": []
      }
    }
  ]
}